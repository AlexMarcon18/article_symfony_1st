{% extends 'base.html.twig' %}

{% block title %}Bienvenue en enfer !{% endblock %}

{% block body %}

    <div class="sidebar" id="top">
        <p id="nav-title"><a href="#top">Nos étapes</a></p>
        <ol>
            <li id="list-nav"><a href="#merise">1. La méthode Merise</a></li>
            <li id="list-nav"><a href="#conceptuel">2. Méthode conceptuelle</a> </li>
            <li id="list-nav"><a href="#MLD">3. Passage au MLD </a> </li>
            <li id="list-nav"><a href="#MPD">4. Passage au MPD </a> </li>
            <li id="list-nav"><a href="#DOCTRINEORM">4. Mise en place avec symfony </a> </li>
        </ol>
    </div>

    <main id="article">

        <div class="container">
            <h2>Introduction à la base de données.</h2>


            <hr  id="merise">

                <h3>La méthode Merise</h3>

            <p>MERISE est une méthode française née dans les années 70, développée initialement par Hubert
                Tardieu. Elle fut ensuite mise en avant dans les années 80, à la demande du ministère de l'Industrie
                qui souhaitait une méthode de conception des Systèmes d'Informations (SI).</p>

            <p>MERISE est donc une méthode d'analyse et de conception des SI basée sur le principe de la
                séparation des données et des traitements. Elle possède un certain nombre de modèles (ou
                schémas) qui sont répartis sur trois niveaux :</p>

            <ul class="list-article">
                <li>Le niveau Conceptuel ou MCD (Méthode Conceptuelle des Données).</li>
                <li>Le niveau logique ou organisationnel ou MLD. (Méthode Logique des Données).</li>
                <li>Le niveau physique ou MPD. (Modèle Physique des données).</li>
            </ul>

            <p>Nous allons donc commencer par la première étape de notre réflexion qui va être de concevoir notre MCD.</p>

            <hr id="conceptuel">

            <h3 id="mcd">Modélisation d'une base de données au niveau conceptuel.</h3>

            <p>Elaborer son MCD correspond à effectuer une représentation graphique et structurée des informations mémorisées par un SI.
            Dans le MCD, on retrouve deux composantes principales : les <span>Entité</span> ainsi que les <span>Associations</span>.
            On retrouve d'ailleurs l'appellation de schéma Entité/Association pour designer le MCD. </p>

            <p>Pour créer notre MCD, nous allons devoir passer par quatres étapes:</p>

            <ul class="list-article">
                <li>Les règles de gestion.</li>
                <li>Le dictionnaire de données</li>
                <li>Et enfin l'élaboration de notre MCD (entités, associations puis ajout des cardinalités)</li>
            </ul>

            <h4 class="sous-titre">Les règles de gestion.</h4>

            <p>Nous sommes ici dans les prémices de notre conceptualisation. Pour créer nos futures tables, il va falloir
            recueillir les besoins de nos futurs utilisateurs. A partir de ces derniers, nous devrions être en mesure d'établir nos
            règles de gestion de données.</p>

            <p>ON peut prendre pour exemple un développeur qui doit informatiser le SI d'un disquaire qu'il connait:</p>

                <ul class="list-article">
                    <li>Pour chaque disque/vinyle, on doit connaître son année de parution, son titre, son genre</li>
                    <li>Un album peut être réalisé par un ou plusieurs artistes dont on connait le nom, le prénom, la date de naissance et l'origine.</li>
                    <li>Chaque disque est identifiable par une référence et ne peut être produit que par une maison de disque.</li>
                </ul>

            <p>Sans s'en rendre compte, juste en énumérant ses besoins, le client nous donne alors naturellement notre base de travail.
            Il est cependant possible que le client ne soit pas en mesure d'exprimer clairement ses besoins. C'est alors qu'en tant que professionnel, il faudra
            creuser le sujet et l'interroger plus précisement car sa logique informatique n'est pas forcément très développée, notre devoir est donc de l'assister au mieux
            possible pour que sa sollicitation soit bien traitée.</p>


            <h4 class="sous-titre">Le dictionnaire de données.</h4>

            <p>C'est une étape intermédiaire qui peut avoir son importance, surtout si vous êtes plusieurs à
                travailler sur une même base de données, d'un volume important. <br>
                Le dictionnaire des données est un document qui regroupe toutes les données que vous aurez à
                conserver dans votre base (et qui figureront donc dans le MCD). Pour chaque donnée, il indique :</p>
            
                <ul class="list-article">
                    <li>le code mnémonique : il s'agit d'un libellé désignant une donnée (par exemple «titre_l» pour
                        le titre d'un livre) ;</li>
                    <li>la désignation : il s'agit d'une mention décrivant ce à quoi la donnée correspond (par
                        exemple «titre du livre») ;</li>
                    <li>le type de donnée :</li>
                    <li> A ou Alphabétique : lorsque la donnée est uniquement composée de caractères
                        alphabétiques (de 'A' à 'Z' et de 'a' à 'z'),</li>
                    <li> N ou Numérique : lorsque la donnée est composée uniquement de nombres (entiers ou
                        réels),</li>
                    <li> AN ou Alphanumérique : lorsque la donnée peut être composée à la fois de caractères
                        alphabétiques et numériques,</li>
                    <li> Date : lorsque la donnée est une date (au format AAAA-MM-JJ),</li>
                    <li> Booléen : Vrai ou Faux ;</li>
                    <li> la taille : elle s'exprime en nombre de caractères ou de chiffres. Dans le cas d'une date au
                        format AAAA-JJ-MM, on compte également le nombre de caractères, soit 10 caractères. Pour
                        ce qui est du type booléen, nul besoin de préciser la taille (ceci dépend de l'implémentation
                        du SGBDR) ;</li>
                    <li> et parfois des remarques ou observations complémentaires (par exemple si une donnée est
                        strictement supérieure à 0, etc.).</li>
                </ul>

            <p>Voici un exemple de dictionnaire de données pour se le representer plus facilement</p>

            <br>

            <img src="{{ asset('build/images/Exemple-donnees.png') }}" class="illustration" alt="exemple tableau">




            <h4 class="sous-titre">Le modèle conceptuel de données</h4>

                <h5>Les entités </h5>

            <p>Chaque entité est unique et est décrite par un ensemble de propriétés encore appelées attributs ou
                caractéristiques. Une des propriétés de l'entité est l'identifiant. Cette propriété doit posséder des
                occurrences uniques et doit être source des dépendances fonctionnelles avec toutes les autres
                propriétés de l'entité. Bien souvent, on utilise une donnée de type entier qui s'incrémente pour
                chaque occurrence, ou encore un code unique spécifique du contexte.</p>

            <img src="{{ asset('build/images/entite.png') }}" class="illustration" alt="">

            <p>On peut reprendre l'exemple du dessus avec notre disquaire et schématiser une entité disque par exemple:</p>

            <img src="{{ asset('build/images/entitexemple.png') }}" class="illustration" alt="">

            <p>Ce qui nous donne notre premier exemple de ce type</p>

            <img src="{{ asset('build/images/bddentiteexemple.png') }}" class="illustration" alt="">

            <br>

                <h5>Les associations</h5>

            <p>Les associations représente donc un lien entre plusieurs entités de notre base de données. Elle va représenter la dynamique du système, elle est caractérisée
            par les cardinalités. L'association dans notre schéma sera représentée par un ovale dont le titre est un verbe d'état ou un verbe d'action.</p>

            <img src="{{ asset('build/images/association.png') }}" class="illustration" alt="illustration association">

            <br>

                <h5>La cardinalité</h5>

            <p>La cardinalité d’une patte reliant une association et une entité précise le nombre de fois minimal et maximal
                d’interventions d’une occurrence de l'entité avec l'association. La cardinalité minimale doit être inférieure
                ou égale à la cardinalité maximale. </p>

            <p>On ne peut retrouver que 4 cardinalités dans nos MCD:</p>

            <ul class="list-article">
                <li>1-1: L'occurrence de l'entité participe une et une fois seulement à l'association</li>
                <li>0-1: L'occurrence de l'entité peut exister sans pour autant participer à la relation mais ne participe jamais
                plus d'une fois</li>
                <li>1-n: L'occurrence de l'entité participe au moins une fois à l'association mais peut y participer sans limite (n fois)</li>
                <li>0-n: L'occurrence peut ne pas participer à l'association mais il existe des cas de figure ou elle peut participer N fois</li>
            </ul>

            <img src="{{ asset('build/images/MCD.png') }}" alt="mcd avec cardinalités" class="illustration">

            <p>Ici on peut observer sur notre exemple les cardinalités:</p>

                <ul class="list-article">
                    <li>En partant de l'article, on peut se dire qu'un article peut n'appartenir à aucune catégories jusqu'à N catégories</li>
                    <li>Dans le sens inverse, nos catégories peuvent contenir de 0 à N article</li>
                    <li>En repartant de l'article, l'article est rédigé par un et un seul auteur</li>
                    <li>Par contre dans le sens inverse, un auteur peut avoir écrit de 1 à N article</li>
                </ul>

                <br>

                <h5>Elaboration du MCD</h5>

            <p>Avec toutes ces connaissances, il nous est donc possible d'élaborer le MCD complet à partir
                des données présentes dans le dictionnaire des données, j'utiliserais ici un schéma à titre d'exemple mais qui ne correspond pas aux bases de données montrées
                précédemment: </p>

            <img src="{{ asset('build/images/merise23.gif') }}" class="illustration" alt="exemple MCD">

            <hr id="MLD">

                <h3>Le passage au MLD</h3>


            <p>Le modèle logique de données est une représentation textuelle du MPD. C'est une représentation en ligne du
                schéma qui représente la structure de notre base de données. Il n'y a pas de travail poussé à réaliser mais surtout d'appliquer certaines
                règles. </p>

            <img src="{{ asset('build/images/MLD.png') }}" alt="mld-textuel" class="illustration">

            <p>On distingue plusieurs règles quand on passe d'un MCD à un MLD.</p>

                <h4 class="sous-titre">Règle numéro 1:</h4>

                <h5>Une entité du MCD devient une relation, c'est-à-dire une table.</h5>

            <p>Dans un SGBD (Système de Gestion de base de données) de type relationnel, une table est une structure tabulaire dont chaque ligne
                correspond aux données d'un objet enregistré (d'où le terme enregistrement) et où chaque colonne correspond à une propriété de cet objet.
                Une table contiendra donc un ensemble d’enregistrements.
                Une ligne correspond à un enregistrement.
                Une colonne correspond à un champ.
                La valeur prise par un champ pour un enregistrement donné est située à l’intersection ligne-colonne correspondant à enregistrement-champ.
                Il n’y a pas de limite théorique au nombre d’enregistrements que peut contenir une table. Par contre, la limite est liée à l’espace de stockage</p>

                <h5> Son identifiant devient la clé primaire de la relation.</h5>

            <p>La clé primaire permet d’identifier de façon unique un enregistrement dans la table.
                Les valeurs de la clé primaire sont donc uniques.
                Les valeurs de la clé primaire sont obligatoirement non nulles.
                Dans la plupart des SGBDR (Système de Gestion de Base de Données Relationnelle), le fait de définir une clé primaire donne lieu
                automatiquement à la création d’un index.
                Un index est un fichier interne au SGBD. L’utilisateur standard n’a pas besoin d’y accéder. L’index a pour but d’accélérer les traitements de
                recherche, de tri, de filtre et notamment sur les tables avec de nombreux enregistrements. La contrepartie est que l’index nécessite de l’espace
                mémoire et surtout, les temps d’insertion, de suppression d’enregistrements sont plus importants car il faut mettre à jour à la fois la table et
                l’index</p>

                <h5>Les autres propriétés deviennent les attributs de la relation.</h5>

            <p>Ici, je préfère illustrer mon propos par un exemple concret</p>

            <img src="{{ asset('build/images/attributrelation.png') }}" class="illustration" alt="attribut relation">

            <p>Ici, on retrouve notre table client, numClient est la clé primaire de cette entité, les autres attributs de cette table deviennent alors attribut
            de cette relation.</p>


                <h4 class="sous-titre">Règle numéro 2:</h4>

            <p>Une association de type 1:N (c'est-à-dire qui a les cardinalités maximales positionnées à « 1 » d’une côté de l’association et à « n » de l’autre
                côté) se traduit par la création d’une clé étrangère dans la relation correspondante à l’entité côté « 1 ».
                Cette clé étrangère référence la clé primaire de la relation correspondant à l’autre entité.</p>

            <img src="{{ asset('build/images/mcdversmld.png') }}" class="illustration" alt="table de MCD">

            <img src="{{ asset('build/images/MlDexemple.png') }}" class="illustration" alt="exemple du MLD">

            <img src="{{ asset('build/images/tableexemple.png') }}" class="illustration" alt="les tables">

            <p>Même si les tables COMMANDE et CLIENT sont 2 tables distinctes, il est possible de retrouver toutes les informations des 2 tables de façon
                cohérente grâce à la clé étrangère.</p>

            <p>De ce fait on remarque que même si certaines informations sont dans deux tables distinctes, on peut les retrouver grâce à la clé étrangère.</p>

            <p>On peut alors savoir quel est le nom du client qui à passé la commande n°11, qui sont les clients qui ont commandé le 01/02/2014, combien de commande le client numéro 3 à passé depuis sa première
            commande...</p>


                <h4 class="sous-titre">Et enfin la règle numéro 3</h4>

            <p>La troisième règle reprend le principe de la deuxième, mais avec deux entités qui sont reliées par la même
                cardinalité 1;N, Cela résulte en la création d'une table dont la clé primaire est composée des clés
                étrangères référençant les relations correspondant aux entités liées par l'association </p>

            <img src="{{ asset('build/images/doublecardinalités.png') }}" class="illustration" alt="double-clé-étrangère">

            <p>On peut observer ici que l'association concernée devient elle-même une table qui aura comme clé primaire
                l'association des deux clés étrangères des tables qu'elle concerne, ici ce sera la clé étrangère de la table commande ainsi que la clé étranère de la table produit.
                Ces deux clés primaires dans leurs tables respectives deviennent dans cette nouvelle table des clés étrangères qui une fois associé formeront la clé primaire de la
                nouvelle table que leurs associations va créer.
            </p>


            <hr id="MPD">


                <h3>Le passage au MPD</h3>


                <h4 class="sous-titre">Introduction</h4>

            <p>Le MPD (Modèle physique des données) est la dernière étape de l’analyse. Le MPD n’est autre qu’une liste
                de tables avec pour chacune d’elle les colonnes faisant partie de cette table. Il s’obtient par calcul à
                partir du MCD. </p>


                <h4 class="sous-titre">Formalisme MPD</h4>

            <p>Chaque nom de table est suivi d’une liste de colonnes entre parenthèses. <br>

                Les clés primaires sont soulignées <br>
                les clés étrangères sont précédées par un dièse. </p>

            <p>Dans un MPD, on crée les tables dont on met le nom dans l’en-tête, ensuite à l’intérieur de ces tables on
                répertorie l’ensemble des champs qu’elles contiennent. Dans un second temps, il faut souligner les champs
                qui sont des clés primaires et mettre un “#” devant les champs qui sont des clés étrangères. <br>

                Pour les clés étrangères ce n’est pas tout, il faut montrer, à l’aide d’une flèche vers quel champ fait
                référence la clé étrangère. La flèche commençant de la clé étrangère et l’extrémité de la flèche quant à
                elle pointe vers le champ référence.</p>

            <img src="{{ asset('build/images/MPDexemple.png') }}" class="illustration" alt="">

            <hr id="DOCTRINEORM">

            <h2>La mise en relation SBD/Symfony via DOCTRINE ORM </h2>

            <p>Doctrine est un ORM (object relational Mapping), il est d'ailleurs l'ORM par défaut du framework symfony !
            Malgré tout, il n'est pas obligatoire si vous vous attaquez à des projets de plus haut niveau.</p>

            <p>Mais qu'est-ce qu'un ORM ?</p>

            <p>Un mapping objet-relationnel (en anglais object relational mapping ou ORM) est un type de programme informatique
                qui se place en interface entre un programme applicatif et une base de données relationnelle pour simuler
                une base de données orientée objet. Ce programme définit des correspondances entre les schémas de la base
                de données et les classes du programme applicatif. On pourrait le désigner par là, « comme une couche d'abstraction
                entre le monde objet et monde relationnel ».</p>

            <p>Le mapping objet-relationnel consiste à déclarer une association entre une (ou plusieurs) classes et une
                table, et chaque attribut de la classe avec un champ de la table associée.</p>

        </div>
    </main>

{% endblock %}
